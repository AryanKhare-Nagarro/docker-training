# Docker Compose file for development environment
version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    image: ${BACKEND_IMAGE_NAME}:dev
    container_name: backend-dev
    ports:
      - "${DEV_BACKEND_PORT}:${DEV_BACKEND_PORT}"
    env_file:
      - .env.dev
    environment:
      - MONGO_URL=mongodb://localhost:${DEV_MONGO_DB_PORT}/${DEV_MONGO_DB_NAME}
      - BACKEND_PORT=${DEV_BACKEND_PORT}
    depends_on:
      mongo:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - dev-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DEV_BACKEND_PORT}/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

# frontend service      
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: ${FRONTEND_IMAGE_NAME}:dev
    container_name: frontend-dev
    ports:
      - "${DEV_FRONTEND_PORT}:${DEV_FRONTEND_PORT}"
    env_file:
      - .env.dev
    environment:
      - BACKEND_URL=http://localhost:${DEV_BACKEND_PORT}
      - FRONTEND_PORT=${DEV_FRONTEND_PORT}
    depends_on:
      backend:
        condition: service_started
    networks:
      - dev-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
  
# MongoDB service
  mongo:
    image: mongo:latest
    container_name: mongo-dev
    ports:
      - "${DEV_MONGO_DB_PORT}:27017"
    networks:
      - dev-network
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3

# Redis service
  redis:
    image: redis:alpine
    container_name: redis-dev
    # no need to expose redis port to host
    networks:
      - dev-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

# Network configuration
networks:
  dev-network:
    driver: bridge

# Volumes configuration
volumes:
  mongodb_data:
    name: mongodb-data
  redis_data:
    name: redis-data