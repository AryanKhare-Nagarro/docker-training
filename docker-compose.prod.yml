version: '3.8'

services:
  backend:
    image: aryankharenagarro/todo-backend:prod
    container_name: backend-prod
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - MONGO_URL=mongodb://mongo:27017/${MONGO_DB_NAME}
      - REDIS_PORT=6379
      - BACKEND_PORT=${BACKEND_PORT}
    depends_on:
      mongo:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - prod-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:${BACKEND_PORT}/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

# frontend service
  frontend:
    image: aryankharenagarro/todo-frontend:prod
    container_name: frontend-prod
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
    depends_on:
      backend:
        condition: service_started
    networks:
      - prod-network
    restart: unless-stopped

# MongoDB service
  mongo:
    image: mongo:latest
    container_name: mongo-prod
    networks:
      - prod-network
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3

# Redis service
  redis:
    image: redis:alpine
    container_name: redis-prod
    networks:
      - prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

# Network configuration
networks:
  prod-network:
    driver: bridge

# Volumes configuration
volumes:
  mongo-data:
    name: mongo-data
  redis-data:
    name: redis-data